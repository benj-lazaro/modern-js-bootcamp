Introduction To Promises
------------------------
- It allows to write asynchrounous code that is much easier to read & understand 
    - It is usually shorter
    - It is NOT so nested

- A promise is an object representing
    - The eventual completion / failure of an asynchrounous operation

- It is a returned object (as proxy) for a valye that is yet to be known
    - An object to which you attach callbacks to the promise object
    - Callbacks to functions that will interact with the successful or failed promise object 

- To create a promise object, it requires two functions as parameters namely:
    - resolve   = code that interacs with promise object if it's status is 'fulfilled'
    - reject    = code that interacs with promise object if it's status is 'rejected'

    - NOTE: Creating an promise object with no functions passed into the parameters
        - The promise object's state will remain 'pending'

- A returned promise object will be in one of these states:
    - pending   = initial state
    - fulfilled = the asynchrounous operation is successful
    - rejected  = the asynchrounous operation failed

- The following methods that interact with the returned promise object
    - .then()   = run when the asynchrounous operation is successful
    - .catch()  = run when the asynchrounous operation failed
   
    - Reference
        - (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)
        - (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)

- Reference (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)
