Eventbased Architecture
-----------------------
- Architecture of the web-based timer app

- The program does two different things / core responsibilities
    - Displays a timer
        - Displays a number of seconds
        - Diplay control buttons (play & pause)

    - Shows an animated border around the timer

- Possible pseudocode implementation
    - Event listener to watch for a 'click' on the start / play button (timer)
        - Draw a full border around the timer (border)
        - Start counting down the timer (timer)

        - Each time the timer counts down, update the border (border)
        - Each time the timer counts down. update the text (timer)

        - If we counted down and the timer reaches 0 (timer)
            - Reset the border (border)

        - Reset internal timer to get ready for another run (timer)

- Based on the every single line of pseudocode code
    - We are alternative between border & timer inside the event listener 
    - This introduces several potential problems
    - To address this is to use a evented style approach

- Evented style pseudocode
    - Event listener to watch for a 'click' on the start / play button (timer)
        - Emit an event stating that the timer has started
            - Watch for this event
            - When it occurs, draw the border

        - Start counting down the timer
            - Emit an event that the timer has 'ticked'
                - Watch for this event
                - When it occurs, draw the border
        
        - Each time the timer counts down, update the text
            - If we counted down and timer reaches 0
                - Emit an event that the timer is done
                    - Watch for this event
                    - When it occurs, reset the border

        - Reset internal timer to get ready for another run (timer)

    - This allow one block of code is 100% focuses on one apsect of the application
        - Some part of the application, emit an event or callback function for other task (border)

        - This approach allows to write clear code
            - Allows for components to be re-used for other projects / purposes