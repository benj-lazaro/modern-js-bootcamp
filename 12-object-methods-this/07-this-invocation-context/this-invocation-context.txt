'this' Invocation Context
-------------------------
- As far as we know:
    - 'this' inside a regular function
        - The current execution scope = the browser's global scope object 'window'

    - 'this' inside an object literal's method
        - The current execution scope = object literal itself

    - However, the value of 'this' changes depending on the Invocation Context
        - How the function / method where 'this' resides is invoked / executed
            - NOT just where the keyword 'this' is declared / written


- RULES:
    - 'this' inside an object literal's function (method)
        - Invocation context = <object_literal>.<method_name>()
        - Current execution scope = object literal itself 

    - 'this' inside an object literal's function (method) DEFINED as an Arrrow Function
        - Invocation context = <object_literal>.<method_name>()
        - Current execution scope = the browser's global scope object 'window'

    - 'this' inside a regular function
        - Invocation context = <function_name>()
        - Current execution scope = the browser's global scope object 'window'


- NOTE: An arrow function does NOT have its own (flexible) version of 'this'
    - Current execution scope = the browser's global scope object 'window'
    - Regardlesss of the Invocation Context used
        - Unless .bind() method is used (to be discussed later)

    - This is why an arrow function is NOT used to define an object literal's function (method)
        - Most of the functions (methods) we write require access to the object literal's 
            - Properties 
            - Other methods
